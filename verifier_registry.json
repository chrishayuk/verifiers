{
  "haiku": {
    "module": "verifiers.poetry.haiku_verifier",
    "class": "HaikuVerifier",
    "description": "Checks if text is ~5-7-5 haiku (with partial-credit).",
    "arguments": [
      {
        "name": "--tolerance",
        "type": "int",
        "default": 1,
        "help": "Allowed +/- deviation from 5 or 7 (Haiku lines)."
      }
    ]
  },
  "limerick": {
    "module": "verifiers.poetry.limerick_verifier",
    "class": "LimerickVerifier",
    "description": "Checks if text is a limerick with partial credit for line count, rhyme, etc.",
    "arguments": [
      {
        "name": "--line_count_required",
        "type": "int",
        "default": 5,
        "help": "Number of lines required (default 5)."
      },
      {
        "name": "--long_min",
        "type": "int",
        "default": 7,
        "help": "Min syllables for lines 1,2,5."
      },
      {
        "name": "--long_max",
        "type": "int",
        "default": 11,
        "help": "Max syllables for lines 1,2,5."
      }
    ]
  },
  "rhyme": {
    "module": "verifiers.poetry.rhyme_verifier",
    "class": "RhymeVerifier",
    "description": "Checks if lines 1 and 2 rhyme (partial overlap or fallback).",
    "arguments": [
      {
        "name": "--partial_threshold",
        "type": "float",
        "default": 0.5,
        "help": "Minimum fraction of overlapping phonemes required at the tail."
      },
      {
        "name": "--fallback_credit",
        "type": "float",
        "default": 0.5,
        "help": "Score assigned if last letters match but phoneme overlap fails."
      }
    ]
  },
  "tanka": {
    "module": "verifiers.poetry.tanka_verifier",
    "class": "TankaVerifier",
    "description": "Checks if text is a 5-line tanka with ~5-7-5-7-7 syllables",
    "arguments": [
      {
        "name": "--tolerance",
        "type": "int",
        "default": 1,
        "help": "Allowed Â± deviation from each line's syllable target"
      }
    ]
  },
  "reasoning_format": {
    "module": "verifiers.reasoning.reasoning_format_verifier",
    "class": "ReasoningFormatVerifier",
    "description": "Checks if text follows the <think> and <answer> tag structure.",
    "arguments": []
  },
  "reasoning_format_with_verifier_answer": {
    "module": "verifiers.reasoning.reasoning_format_with_verifier_answer_verifier",
    "class": "ReasoningFormatWithVerifierAnswerVerifier",
    "description": "Checks if text follows the <think> and <answer> tag structure.",
    "arguments": []
  },
  "boxed_answer": {
    "module": "verifiers.math.boxed_answer_verifier",
    "class": "BoxedAnswerVerifier",
    "description": "Enforces that the final answer is in a LaTeX box and matches the gold solution.",
    "arguments": [
      {
        "name": "--gold_solution",
        "type": "str",
        "default": null,
        "help": "The correct LaTeX box expression for comparison."
      }
    ]
  },
  "verifier_answer": {
    "module": "verifiers.reasoning.verifier_answer_verifier",
    "class": "VerifierAnswerVerifier",
    "description": "Requires the final answer to appear within <verifier_answer>...</verifier_answer> tags and match a simple gold answer string.",
    "arguments": [
      {
        "name": "--gold_solution",
        "type": "str",
        "default": null,
        "help": "Plain-text correct answer for direct comparison."
      }
    ]
  },
  "morse_code": {
    "module": "verifiers.language.morse_code.morse_code_verifier",
    "class": "MorseCodeVerifier",
    "description": "Checks if text matches Morse encoding or decoding of the original_text.",
    "arguments": [
      {
        "name": "--original_text",
        "type": "str",
        "default": "",
        "help": "Reference text (in plain text for encode mode, or Morse code for decode mode)."
      },
      {
        "name": "--verify_mode",
        "type": "str",
        "default": "encode",
        "help": "Either 'encode' (candidate is Morse) or 'decode' (candidate is plain text)."
      }
    ]
  },
  "answer_satisfaction": {
    "module": "verifiers.reasoning.answer_satisfaction_verifier",
    "class": "AnswerSatisfactionVerifier",
    "description": "Scores how 'satisfying' the <answer> is for a given question, factoring correctness with a gold_answer. Calls LLM to produce a 0..1 score.",
    "arguments": [
      {
        "name": "--question",
        "type": "str",
        "default": null,
        "help": "The original question to pass to the LLM."
      },
      {
        "name": "--gold_answer",
        "type": "str",
        "default": null,
        "help": "The correct or reference answer for scoring correctness."
      }
    ]
  }
}